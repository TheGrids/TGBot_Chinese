package bot

import (
	"fmt"
	"strconv"
	"tgbot_chinese/internal/domain"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/rs/zerolog/log"
)

// HandleUpdates –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
func HandleUpdates(bot *tgbotapi.BotAPI, updates tgbotapi.UpdatesChannel, words []domain.HSKWord) {
	for update := range updates {
		if update.Message == nil {
			continue
		}

		log.Info().Str("command", update.Message.Text).Msg("–í–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞")

		if num, err := strconv.Atoi(update.Message.Text[:1]); err == nil && num >= 1 && num <= 6 {
			word := GetRandomWordByLvl(words, num)
			if word != nil {
				response := fmt.Sprintf("üîπ –°–ª–æ–≤–æ —É—Ä–æ–≤–Ω—è HSK %d:\n%s [%s] - %s", num, word.Chinese, word.Pinyin, word.Russian)
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, response))
			} else {
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è."))
			}
		} else { // TODO –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ—Å—Ç—ã–ª–∏
			switch {
			case update.Message == nil:
				continue

			case update.Message.IsCommand():
				handleCommands(bot, update.Message, words)
			case update.Message.Text == "üìö –†–∞–Ω–¥–æ–º":
				sendRandomWord(bot, update.Message, words)
			case update.Message.Text == "‚úçÔ∏è –í—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å":
				changeLvl(bot, update.Message, words)
			case update.Message.Text == "‚ùå –í—ã—Ö–æ–¥":
				sendWelcome(bot, update.Message.Chat.ID)
			default:
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"))
			}
		}
	}
}

func handleCommands(bot *tgbotapi.BotAPI, msg *tgbotapi.Message, words []domain.HSKWord) {
	switch msg.Command() {
	case "start":
		sendWelcome(bot, msg.Chat.ID)
	case "word":
		sendRandomWord(bot, msg, words)
	}
}

func sendWelcome(bot *tgbotapi.BotAPI, chatID int64) {
	text := "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HSK Dealer!üéâ</b>\n\n" +
		"–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ HSKüìö"
	msg := tgbotapi.NewMessage(chatID, text)

	msg.ParseMode = "HTML" // –í–∫–ª—é—á–∞–µ–º HTML-—Ä–∞–∑–º–µ—Ç–∫—É

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìö –†–∞–Ω–¥–æ–º"),
			tgbotapi.NewKeyboardButton("‚úçÔ∏è –í—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å"),
		),
		// tgbotapi.NewKeyboardButtonRow(
		// 	tgbotapi.NewKeyboardButton("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å"),
		// 	tgbotapi.NewKeyboardButton("üÜò –ü–æ–º–æ—â—å"),
		// ),
	)

	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

func sendRandomWord(bot *tgbotapi.BotAPI, msg *tgbotapi.Message, words []domain.HSKWord) {
	text := GetRandomWord(words)
	message := tgbotapi.NewMessage(msg.Chat.ID, text)
	bot.Send(message)
}

func changeLvl(bot *tgbotapi.BotAPI, msg *tgbotapi.Message, words []domain.HSKWord) {
	message := tgbotapi.NewMessage(msg.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å HSK:")

	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("1Ô∏è‚É£"),
			tgbotapi.NewKeyboardButton("2Ô∏è‚É£"),
			tgbotapi.NewKeyboardButton("3Ô∏è‚É£"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("4Ô∏è‚É£"),
			tgbotapi.NewKeyboardButton("5Ô∏è‚É£"),
			tgbotapi.NewKeyboardButton("6Ô∏è‚É£"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ùå –í—ã—Ö–æ–¥"),
		),
	)

	message.ReplyMarkup = keyboard
	bot.Send(message)
}
